{"ast":null,"code":"var _jsxFileName = \"/home/tpss/public_html/Mernstack/newproject/frontend/src/components/ResetPasswordPage.jsx\",\n  _s = $RefreshSig$();\nimport './assets/resetpassword.css';\nimport React, { useState } from 'react';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst ResetPasswordPage = () => {\n  _s();\n  const [password, setPassword] = useState('');\n  const [resetPasswordToken, setResetPasswordToken] = useState('');\n  const PasswordReset = async e => {\n    e.preventDefault();\n    if (!resetPasswordToken) {\n      setSuccessMessage(\"Reset token is missing.\");\n      return;\n    }\n    try {\n      const result = await fetch(`http://localhost:8000/api/resetPassword?token=${resetPasswordToken}`, {\n        method: \"POST\",\n        body: JSON.stringify({\n          password,\n          resetPasswordToken\n        }),\n        headers: {\n          'Content-Type': 'application/json'\n        }\n      });\n      if (result === 200) {\n        setSuccessMessage(\"Your password has been reset successfully!\");\n        setPassword('');\n      } else if (result.status === 400) {\n        setSuccessMessage(\"Invalid token or email is required.\");\n      }\n    } catch (error) {\n      console.error(\"Error:\", error);\n      setSuccessMessage(\"An error occurred. Please try again later.\");\n    }\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"reset-password\",\n    children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n      children: \"Reset Password\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 37,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n      className: \"form-control inputBox\",\n      type: \"password\",\n      placeholder: \"New Password\",\n      value: password,\n      onChange: e => setPassword(e.target.value),\n      required: true\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 38,\n      columnNumber: 9\n    }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n      onClick: PasswordReset,\n      type: \"submit\",\n      children: \"Reset Password\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 46,\n      columnNumber: 9\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 36,\n    columnNumber: 5\n  }, this);\n};\n_s(ResetPasswordPage, \"2F4LChBC4rvL0XCf0JFDnlZyiJo=\");\n_c = ResetPasswordPage;\nexport default ResetPasswordPage;\nvar _c;\n$RefreshReg$(_c, \"ResetPasswordPage\");","map":{"version":3,"names":["React","useState","jsxDEV","_jsxDEV","ResetPasswordPage","_s","password","setPassword","resetPasswordToken","setResetPasswordToken","PasswordReset","e","preventDefault","setSuccessMessage","result","fetch","method","body","JSON","stringify","headers","status","error","console","className","children","fileName","_jsxFileName","lineNumber","columnNumber","type","placeholder","value","onChange","target","required","onClick","_c","$RefreshReg$"],"sources":["/home/tpss/public_html/Mernstack/newproject/frontend/src/components/ResetPasswordPage.jsx"],"sourcesContent":["import './assets/resetpassword.css';\nimport React, { useState } from 'react';\n\nconst ResetPasswordPage = () => {\n  const [password, setPassword] = useState('');\n  const [resetPasswordToken, setResetPasswordToken] = useState('');\n\n  const PasswordReset = async (e) => {\n    e.preventDefault();\n    if (!resetPasswordToken) {\n      setSuccessMessage(\"Reset token is missing.\");\n      return;\n    }\n    try {\n      const result = await fetch(`http://localhost:8000/api/resetPassword?token=${resetPasswordToken}`, {\n        method: \"POST\",\n        body: JSON.stringify({ password, resetPasswordToken }),\n        headers: {\n          'Content-Type': 'application/json'\n        },\n      });\n\n      if (result===200) {\n        setSuccessMessage(\"Your password has been reset successfully!\");\n        setPassword('');\n      } else if(result.status === 400) {\n        setSuccessMessage(\"Invalid token or email is required.\");\n      }\n    } catch (error) {\n      console.error(\"Error:\", error);\n      setSuccessMessage(\"An error occurred. Please try again later.\");\n    }\n  };\n\n  return (\n    <div className='reset-password'>\n      <h2>Reset Password</h2>\n        <input\n          className='form-control inputBox'\n          type=\"password\"\n          placeholder=\"New Password\"\n          value={password}\n          onChange={(e) => setPassword(e.target.value)}\n          required\n        />\n        <button onClick={PasswordReset} type=\"submit\">Reset Password</button>\n    </div>\n  );\n};\n\nexport default ResetPasswordPage;\n"],"mappings":";;AAAA,OAAO,4BAA4B;AACnC,OAAOA,KAAK,IAAIC,QAAQ,QAAQ,OAAO;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAExC,MAAMC,iBAAiB,GAAGA,CAAA,KAAM;EAAAC,EAAA;EAC9B,MAAM,CAACC,QAAQ,EAAEC,WAAW,CAAC,GAAGN,QAAQ,CAAC,EAAE,CAAC;EAC5C,MAAM,CAACO,kBAAkB,EAAEC,qBAAqB,CAAC,GAAGR,QAAQ,CAAC,EAAE,CAAC;EAEhE,MAAMS,aAAa,GAAG,MAAOC,CAAC,IAAK;IACjCA,CAAC,CAACC,cAAc,CAAC,CAAC;IAClB,IAAI,CAACJ,kBAAkB,EAAE;MACvBK,iBAAiB,CAAC,yBAAyB,CAAC;MAC5C;IACF;IACA,IAAI;MACF,MAAMC,MAAM,GAAG,MAAMC,KAAK,CAAC,iDAAiDP,kBAAkB,EAAE,EAAE;QAChGQ,MAAM,EAAE,MAAM;QACdC,IAAI,EAAEC,IAAI,CAACC,SAAS,CAAC;UAAEb,QAAQ;UAAEE;QAAmB,CAAC,CAAC;QACtDY,OAAO,EAAE;UACP,cAAc,EAAE;QAClB;MACF,CAAC,CAAC;MAEF,IAAIN,MAAM,KAAG,GAAG,EAAE;QAChBD,iBAAiB,CAAC,4CAA4C,CAAC;QAC/DN,WAAW,CAAC,EAAE,CAAC;MACjB,CAAC,MAAM,IAAGO,MAAM,CAACO,MAAM,KAAK,GAAG,EAAE;QAC/BR,iBAAiB,CAAC,qCAAqC,CAAC;MAC1D;IACF,CAAC,CAAC,OAAOS,KAAK,EAAE;MACdC,OAAO,CAACD,KAAK,CAAC,QAAQ,EAAEA,KAAK,CAAC;MAC9BT,iBAAiB,CAAC,4CAA4C,CAAC;IACjE;EACF,CAAC;EAED,oBACEV,OAAA;IAAKqB,SAAS,EAAC,gBAAgB;IAAAC,QAAA,gBAC7BtB,OAAA;MAAAsB,QAAA,EAAI;IAAc;MAAAC,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAI,CAAC,eACrB1B,OAAA;MACEqB,SAAS,EAAC,uBAAuB;MACjCM,IAAI,EAAC,UAAU;MACfC,WAAW,EAAC,cAAc;MAC1BC,KAAK,EAAE1B,QAAS;MAChB2B,QAAQ,EAAGtB,CAAC,IAAKJ,WAAW,CAACI,CAAC,CAACuB,MAAM,CAACF,KAAK,CAAE;MAC7CG,QAAQ;IAAA;MAAAT,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OACT,CAAC,eACF1B,OAAA;MAAQiC,OAAO,EAAE1B,aAAc;MAACoB,IAAI,EAAC,QAAQ;MAAAL,QAAA,EAAC;IAAc;MAAAC,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAQ,CAAC;EAAA;IAAAH,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OACpE,CAAC;AAEV,CAAC;AAACxB,EAAA,CA7CID,iBAAiB;AAAAiC,EAAA,GAAjBjC,iBAAiB;AA+CvB,eAAeA,iBAAiB;AAAC,IAAAiC,EAAA;AAAAC,YAAA,CAAAD,EAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}