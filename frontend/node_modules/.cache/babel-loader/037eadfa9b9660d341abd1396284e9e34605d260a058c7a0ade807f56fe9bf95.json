{"ast":null,"code":"const jwt = require(\"jsonwebtoken\");\nconst User = require(\"../models/User\");\nexports.viewProfile = async (req, res) => {\n  try {\n    var _req$headers$authoriz;\n    const token = (_req$headers$authoriz = req.headers.authorization) === null || _req$headers$authoriz === void 0 ? void 0 : _req$headers$authoriz.split(\" \")[1];\n    if (!token) {\n      return res.status(401).json({\n        message: \"Unauthorized: No token provided\"\n      });\n    }\n\n    // Decode token to get user ID\n    const decoded = jwt.verify(token, \"your-secret-key\"); // Replace with your actual secret key\n    const userId = decoded.userId;\n    const viewProfile = await User.findById(userId).select(\"-password\");\n    if (!viewProfile) {\n      return res.status(404).json({\n        message: \"User not found\"\n      });\n    }\n    return res.status(200).json({\n      message: \"Profile fetched\",\n      profile: viewProfile\n    });\n  } catch (error) {\n    console.error(\"Server error:\", error);\n    return res.status(500).json({\n      message: \"Server error\",\n      error: error.message\n    });\n  }\n};","map":{"version":3,"names":["jwt","require","User","exports","viewProfile","req","res","_req$headers$authoriz","token","headers","authorization","split","status","json","message","decoded","verify","userId","findById","select","profile","error","console"],"sources":["/home/tpss/public_html/Mernstack/authtask/frontend/src/components/UserProfile.jsx"],"sourcesContent":["const jwt = require(\"jsonwebtoken\");\nconst User = require(\"../models/User\");\n\nexports.viewProfile = async (req, res) => {\n  try {\n    const token = req.headers.authorization?.split(\" \")[1];\n\n    if (!token) {\n      return res.status(401).json({ message: \"Unauthorized: No token provided\" });\n    }\n\n    // Decode token to get user ID\n    const decoded = jwt.verify(token, \"your-secret-key\"); // Replace with your actual secret key\n    const userId = decoded.userId;\n\n    const viewProfile = await User.findById(userId).select(\"-password\");\n\n    if (!viewProfile) {\n      return res.status(404).json({ message: \"User not found\" });\n    }\n\n    return res.status(200).json({ message: \"Profile fetched\", profile: viewProfile });\n  } catch (error) {\n    console.error(\"Server error:\", error);\n    return res.status(500).json({ message: \"Server error\", error: error.message });\n  }\n};\n"],"mappings":"AAAA,MAAMA,GAAG,GAAGC,OAAO,CAAC,cAAc,CAAC;AACnC,MAAMC,IAAI,GAAGD,OAAO,CAAC,gBAAgB,CAAC;AAEtCE,OAAO,CAACC,WAAW,GAAG,OAAOC,GAAG,EAAEC,GAAG,KAAK;EACxC,IAAI;IAAA,IAAAC,qBAAA;IACF,MAAMC,KAAK,IAAAD,qBAAA,GAAGF,GAAG,CAACI,OAAO,CAACC,aAAa,cAAAH,qBAAA,uBAAzBA,qBAAA,CAA2BI,KAAK,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC;IAEtD,IAAI,CAACH,KAAK,EAAE;MACV,OAAOF,GAAG,CAACM,MAAM,CAAC,GAAG,CAAC,CAACC,IAAI,CAAC;QAAEC,OAAO,EAAE;MAAkC,CAAC,CAAC;IAC7E;;IAEA;IACA,MAAMC,OAAO,GAAGf,GAAG,CAACgB,MAAM,CAACR,KAAK,EAAE,iBAAiB,CAAC,CAAC,CAAC;IACtD,MAAMS,MAAM,GAAGF,OAAO,CAACE,MAAM;IAE7B,MAAMb,WAAW,GAAG,MAAMF,IAAI,CAACgB,QAAQ,CAACD,MAAM,CAAC,CAACE,MAAM,CAAC,WAAW,CAAC;IAEnE,IAAI,CAACf,WAAW,EAAE;MAChB,OAAOE,GAAG,CAACM,MAAM,CAAC,GAAG,CAAC,CAACC,IAAI,CAAC;QAAEC,OAAO,EAAE;MAAiB,CAAC,CAAC;IAC5D;IAEA,OAAOR,GAAG,CAACM,MAAM,CAAC,GAAG,CAAC,CAACC,IAAI,CAAC;MAAEC,OAAO,EAAE,iBAAiB;MAAEM,OAAO,EAAEhB;IAAY,CAAC,CAAC;EACnF,CAAC,CAAC,OAAOiB,KAAK,EAAE;IACdC,OAAO,CAACD,KAAK,CAAC,eAAe,EAAEA,KAAK,CAAC;IACrC,OAAOf,GAAG,CAACM,MAAM,CAAC,GAAG,CAAC,CAACC,IAAI,CAAC;MAAEC,OAAO,EAAE,cAAc;MAAEO,KAAK,EAAEA,KAAK,CAACP;IAAQ,CAAC,CAAC;EAChF;AACF,CAAC","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}