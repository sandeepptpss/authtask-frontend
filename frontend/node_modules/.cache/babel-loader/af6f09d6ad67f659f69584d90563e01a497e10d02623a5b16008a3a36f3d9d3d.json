{"ast":null,"code":"var _s = $RefreshSig$();\nimport React, { useEffect, useState } from \"react\";\nimport { useNavigate } from \"react-router-dom\";\nconst UserProfile = () => {\n  _s();\n  const [user, setUser] = useState(null);\n  const [error, setError] = useState(\"\");\n  const [loading, setLoading] = useState(true);\n  const navigate = useNavigate();\n  useEffect(() => {\n    const fetchUserProfile = async () => {\n      try {\n        const token = localStorage.getItem(\"token\");\n        if (!token) {\n          navigate(\"/login\");\n          return;\n        }\n        const response = await fetch(\"http://localhost:8002/api/view-user-profile\", {\n          headers: {\n            Authorization: `Bearer ${token}`,\n            \"Content-Type\": \"application/json\"\n          }\n        });\n\n        // Check response content type first\n        const contentType = response.headers.get(\"content-type\");\n        if (!contentType || !contentType.includes(\"application/json\")) {\n          const text = await response.text();\n          throw new Error(`Invalid response: ${text.slice(0, 100)}`);\n        }\n        const data = await response.json();\n        if (!response.ok) {\n          if ([401, 403].includes(response.status)) {\n            localStorage.removeItem(\"token\");\n            navigate(\"/login\");\n          }\n          throw new Error(data.message || \"Failed to fetch profile\");\n        }\n        setUser(data.viewProfile); // Changed to data.viewProfile\n      } catch (err) {\n        setError(err.message);\n        console.error(\"Fetch error:\", err);\n      } finally {\n        setLoading(false);\n      }\n    };\n    fetchUserProfile();\n  }, [navigate]);\n\n  // Rest of your component remains the same\n};\n_s(UserProfile, \"+j+W8CirsBPRazV6M5fiksh8McM=\", false, function () {\n  return [useNavigate];\n});\n_c = UserProfile;\nvar _c;\n$RefreshReg$(_c, \"UserProfile\");","map":{"version":3,"names":["React","useEffect","useState","useNavigate","UserProfile","_s","user","setUser","error","setError","loading","setLoading","navigate","fetchUserProfile","token","localStorage","getItem","response","fetch","headers","Authorization","contentType","get","includes","text","Error","slice","data","json","ok","status","removeItem","message","viewProfile","err","console","_c","$RefreshReg$"],"sources":["/home/tpss/public_html/Mernstack/authtask/frontend/src/components/UserProfile.jsx"],"sourcesContent":["import React, { useEffect, useState } from \"react\";\nimport { useNavigate } from \"react-router-dom\";\n\nconst UserProfile = () => {\n  const [user, setUser] = useState(null);\n  const [error, setError] = useState(\"\");\n  const [loading, setLoading] = useState(true);\n  const navigate = useNavigate();\n\n  useEffect(() => {\n    const fetchUserProfile = async () => {\n      try {\n        const token = localStorage.getItem(\"token\");\n        if (!token) {\n          navigate(\"/login\");\n          return;\n        }\n\n        const response = await fetch(\"http://localhost:8002/api/view-user-profile\", {\n          headers: { \n            Authorization: `Bearer ${token}`,\n            \"Content-Type\": \"application/json\"\n          }\n        });\n\n        // Check response content type first\n        const contentType = response.headers.get(\"content-type\");\n        if (!contentType || !contentType.includes(\"application/json\")) {\n          const text = await response.text();\n          throw new Error(`Invalid response: ${text.slice(0, 100)}`);\n        }\n\n        const data = await response.json();\n\n        if (!response.ok) {\n          if ([401, 403].includes(response.status)) {\n            localStorage.removeItem(\"token\");\n            navigate(\"/login\");\n          }\n          throw new Error(data.message || \"Failed to fetch profile\");\n        }\n\n        setUser(data.viewProfile); // Changed to data.viewProfile\n      } catch (err) {\n        setError(err.message);\n        console.error(\"Fetch error:\", err);\n      } finally {\n        setLoading(false);\n      }\n    };\n\n    fetchUserProfile();\n  }, [navigate]);\n\n  // Rest of your component remains the same\n};"],"mappings":";AAAA,OAAOA,KAAK,IAAIC,SAAS,EAAEC,QAAQ,QAAQ,OAAO;AAClD,SAASC,WAAW,QAAQ,kBAAkB;AAE9C,MAAMC,WAAW,GAAGA,CAAA,KAAM;EAAAC,EAAA;EACxB,MAAM,CAACC,IAAI,EAAEC,OAAO,CAAC,GAAGL,QAAQ,CAAC,IAAI,CAAC;EACtC,MAAM,CAACM,KAAK,EAAEC,QAAQ,CAAC,GAAGP,QAAQ,CAAC,EAAE,CAAC;EACtC,MAAM,CAACQ,OAAO,EAAEC,UAAU,CAAC,GAAGT,QAAQ,CAAC,IAAI,CAAC;EAC5C,MAAMU,QAAQ,GAAGT,WAAW,CAAC,CAAC;EAE9BF,SAAS,CAAC,MAAM;IACd,MAAMY,gBAAgB,GAAG,MAAAA,CAAA,KAAY;MACnC,IAAI;QACF,MAAMC,KAAK,GAAGC,YAAY,CAACC,OAAO,CAAC,OAAO,CAAC;QAC3C,IAAI,CAACF,KAAK,EAAE;UACVF,QAAQ,CAAC,QAAQ,CAAC;UAClB;QACF;QAEA,MAAMK,QAAQ,GAAG,MAAMC,KAAK,CAAC,6CAA6C,EAAE;UAC1EC,OAAO,EAAE;YACPC,aAAa,EAAE,UAAUN,KAAK,EAAE;YAChC,cAAc,EAAE;UAClB;QACF,CAAC,CAAC;;QAEF;QACA,MAAMO,WAAW,GAAGJ,QAAQ,CAACE,OAAO,CAACG,GAAG,CAAC,cAAc,CAAC;QACxD,IAAI,CAACD,WAAW,IAAI,CAACA,WAAW,CAACE,QAAQ,CAAC,kBAAkB,CAAC,EAAE;UAC7D,MAAMC,IAAI,GAAG,MAAMP,QAAQ,CAACO,IAAI,CAAC,CAAC;UAClC,MAAM,IAAIC,KAAK,CAAC,qBAAqBD,IAAI,CAACE,KAAK,CAAC,CAAC,EAAE,GAAG,CAAC,EAAE,CAAC;QAC5D;QAEA,MAAMC,IAAI,GAAG,MAAMV,QAAQ,CAACW,IAAI,CAAC,CAAC;QAElC,IAAI,CAACX,QAAQ,CAACY,EAAE,EAAE;UAChB,IAAI,CAAC,GAAG,EAAE,GAAG,CAAC,CAACN,QAAQ,CAACN,QAAQ,CAACa,MAAM,CAAC,EAAE;YACxCf,YAAY,CAACgB,UAAU,CAAC,OAAO,CAAC;YAChCnB,QAAQ,CAAC,QAAQ,CAAC;UACpB;UACA,MAAM,IAAIa,KAAK,CAACE,IAAI,CAACK,OAAO,IAAI,yBAAyB,CAAC;QAC5D;QAEAzB,OAAO,CAACoB,IAAI,CAACM,WAAW,CAAC,CAAC,CAAC;MAC7B,CAAC,CAAC,OAAOC,GAAG,EAAE;QACZzB,QAAQ,CAACyB,GAAG,CAACF,OAAO,CAAC;QACrBG,OAAO,CAAC3B,KAAK,CAAC,cAAc,EAAE0B,GAAG,CAAC;MACpC,CAAC,SAAS;QACRvB,UAAU,CAAC,KAAK,CAAC;MACnB;IACF,CAAC;IAEDE,gBAAgB,CAAC,CAAC;EACpB,CAAC,EAAE,CAACD,QAAQ,CAAC,CAAC;;EAEd;AACF,CAAC;AAACP,EAAA,CApDID,WAAW;EAAA,QAIED,WAAW;AAAA;AAAAiC,EAAA,GAJxBhC,WAAW;AAAA,IAAAgC,EAAA;AAAAC,YAAA,CAAAD,EAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}